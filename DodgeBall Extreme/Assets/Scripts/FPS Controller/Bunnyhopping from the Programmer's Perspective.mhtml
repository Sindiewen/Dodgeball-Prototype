<!DOCTYPE html>
<!-- saved from url=(0043)https://adrianb.io/2015/02/14/bunnyhop.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style class="darkreader darkreader--fallback" media="screen"></style><style class="darkreader darkreader--text" media="screen"></style><style class="darkreader darkreader--invert" media="screen">.jfk-bubble, embed[type="application/pdf"] {
    filter: invert(100%) hue-rotate(180deg) contrast(90%) !important;
}</style><style class="darkreader darkreader--inline" media="screen">[data-darkreader-inline-bgcolor] {
  background-color: var(--darkreader-inline-bgcolor) !important;
}
[data-darkreader-inline-bgimage] {
  background-image: var(--darkreader-inline-bgimage) !important;
}
[data-darkreader-inline-border] {
  border-color: var(--darkreader-inline-border) !important;
}
[data-darkreader-inline-border-bottom] {
  border-bottom-color: var(--darkreader-inline-border-bottom) !important;
}
[data-darkreader-inline-border-left] {
  border-left-color: var(--darkreader-inline-border-left) !important;
}
[data-darkreader-inline-border-right] {
  border-right-color: var(--darkreader-inline-border-right) !important;
}
[data-darkreader-inline-border-top] {
  border-top-color: var(--darkreader-inline-border-top) !important;
}
[data-darkreader-inline-boxshadow] {
  box-shadow: var(--darkreader-inline-boxshadow) !important;
}
[data-darkreader-inline-color] {
  color: var(--darkreader-inline-color) !important;
}
[data-darkreader-inline-fill] {
  fill: var(--darkreader-inline-fill) !important;
}
[data-darkreader-inline-stroke] {
  stroke: var(--darkreader-inline-stroke) !important;
}
[data-darkreader-inline-outline] {
  outline-color: var(--darkreader-inline-outline) !important;
}</style><style class="darkreader darkreader--user-agent" media="screen">html {
    background-color: #181a1b !important;
}
html, body, input, textarea, select, button {
    background-color: #181a1b;
}
html, body, input, textarea, select, button {
    border-color: #575757;
    color: #e8e6e3;
}
a {
    color: #3391ff;
}
table {
    border-color: #4c4c4c;
}
::placeholder {
    color: #bab5ab;
}
input:-webkit-autofill,
textarea:-webkit-autofill,
select:-webkit-autofill {
    background-color: #545b00 !important;
    color: #e8e6e3 !important;
}
::-webkit-scrollbar {
    background-color: #1c1e1f;
    color: #c5c1b9;
}
::-webkit-scrollbar-thumb {
    background-color: #2f3234;
}
::-webkit-scrollbar-thumb:hover {
    background-color: #383b3e;
}
::-webkit-scrollbar-thumb:active {
    background-color: #3d4043;
}
::-webkit-scrollbar-corner {
    background-color: #181a1b;
}
* {
    scrollbar-color: #1c1e1f #2f3234;
}
::selection {
    background-color: #005ccc !important;
    color: #ffffff !important;
}
::-moz-selection {
    background-color: #005ccc !important;
    color: #ffffff !important;
}</style>
		<title> Bunnyhopping from the Programmer's Perspective </title>
		<link href="./Bunnyhopping from the Programmer&#39;s Perspective_files/css" rel="stylesheet" type="text/css">

		<link rel="stylesheet" type="text/css" href="./Bunnyhopping from the Programmer&#39;s Perspective_files/all.css"><style class="darkreader darkreader--cors" media="screen">* {
	margin: 0;
	padding: 0;
	border: 0;
}

body {
	background-color: #DBE6EC;
	font-family: "Open Sans", sans-serif;
}

h1,h2,h3 {
	font-family: "Roboto", sans-serif;
}

table,th,tr,td {
	border: 1px solid #a9a9a9;
	border-collapse: collapse;
}

th {
	background-color: #cfcfcf;
}

ul {
	list-style-type: square;
	list-style-position: outside;
	margin-left: 1em;
	padding-bottom:1em;
}

ul ul {
	list-style-type: circle;
	padding-bottom: 0;
}

ol {
	list-style-position: outside;
	margin-left: 1em;
	padding-bottom:1em;
}

blockquote {
	border-top: 1px solid #a9a9a9;
	border-bottom: 1px solid #a9a9a9;
	padding: 5px;
	margin: 0 auto 1em auto;
	width: 100%;
	max-width: 700px;
}

blockquote p {
	padding-bottom: 0 !important;
}

.post_tag {
	display: inline-block;
	padding: 4px 8px;
	font-size: 12px;

	-webkit-border-radius: 3px;
	-moz-border-radius: 3px;
	border-radius: 3px;

	color: #35b0f8;
	background-color: #c4e8fd;
}

.post_tag:hover {
	text-decoration: underline;
}

#footer {
	position: relative;
	top: 5px;
	font-size: 0.6em;
	text-align: center;
}

.content a {
	text-decoration: none;
}

.content a > h2 {
	color: black;
}

#markdown-toc ul {
	margin-left: 3em;
	font-size: 0.9em;
}

ul#markdown-toc {
	margin-left: 3em;
	font-size: 1em;
}

a:link, a:visited, a:hover {
	color: #2A94D6;
}

a:active {
	color: #4CB6F8;
}

.header {
	display: block;
	text-align: center;
	color: #FFFFFF;
	background-color: #2A94D6;
	border-bottom: 2px solid #888888;

	text-shadow: 2px 2px 2px #444444;

	padding-bottom: 5px;

	background: #2A94D6; 
	background: -moz-radial-gradient(bottom center, ellipse cover,  #5CC0F9 0%, #2a94d6 100%); 
	background: -webkit-gradient(radial, bottom center, 0px, center center, 100%, color-stop(0%,#5CC0F9), color-stop(100%,#2a94d6)); 
	background: -webkit-radial-gradient(bottom center, ellipse cover,  #5CC0F9 0%,#2a94d6 100%); 
	background: -o-radial-gradient(bottom center, ellipse cover,  #5CC0F9 0%,#2a94d6 100%); 
	background: -ms-radial-gradient(bottom center, ellipse cover,  #5CC0F9 0%,#2a94d6 100%); 
	background: radial-gradient(ellipse at bottom center,  #5CC0F9 0%,#2a94d6 100%); 
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#5CC0F9', endColorstr='#2a94d6',GradientType=1 ); 

}

.nav {
	display: block;
	height: 30px;
	line-height: 30px;
}

.article {
	display: block;
	border-bottom: 2px solid #AAAAAA;
	margin: 0 0 5px 0;
	padding: 0 10px;
}

.article p {
	padding-bottom:1em;
}

.postinfo {
	margin-top: 2px;
	font-size: 60%;
	color: #A6A6A6;
}

.math {
	font-family: "Times New Roman", serif;
}

#pagination {
	text-align: center;
}



.content > h1, .content > p {
	margin-left: 10px;
}

.recommended {
	display: block;
	border-bottom: 2px solid #AAAAAA;
	margin: 0 0 5px 0;
	padding: 0 10px 0 10px;
	height: 310px;
	overflow-y: hidden;
	overflow-x: scroll;
	white-space: nowrap;

	-webkit-overflow-scrolling: touch;
}

.recommendation {
	display: inline-block;
	width: 280px;
	height: 290px;
	white-space: normal;
	vertical-align: top;
	border: 1px solid #AAA;
	border-radius: 10px;
	padding: 5px;
}

.recommendation h3 {
	color: black;
}

.recommendation:hover h3 {
	color: #666;
}

.recommendation img {
	height: 200px;
	max-width: 100%;
	object-fit: contain;
	margin: 0 auto;
}

.recommendation .under {
	padding-top: 10px;
	border-top: 1px solid #AAA;
}




.media-flex {
    position: relative;
    height: 0px;
}

.media-flex .gfyitem > div,
.media-flex .gfyitem .gfyPreLoadCanvas,
.media-flex .gfyitem .gfyVid,
.media-flex .gfyitem  .gfyGif {
    position: absolute !important;
    top: 0; right: 0; bottom: 0; left: 0;
    width: 100% !important;
    height: 100% !important;
}


.video-center {
	max-width: 560px;
	margin: 0 auto;
}
.video-container {
    position: relative;
    padding-bottom: 56.25%;
    padding-top: 30px; height: 0; overflow: hidden;
}
 
.video-container iframe,
.video-container object,
.video-container embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}



.nav#mobile {
	display: block;
	cursor: pointer;
}

.nav#desktop {
	display: none;
}

.content {
	display: block;
	margin: 0 auto;
	width: 100%;

	background-color: #F0F1F2;
	border-left: 0;
	border-right: 0;
	border-bottom: 1px solid #AAAAAA;
	box-shadow: 0 0 80px rgba(170, 170, 170, 1); 
}

#navlinks {
	display: none;
	background-color: #1983C5;
}

.navlink {
	cursor: pointer;
	height: 25px;
	line-height: 25px;
}

.navlink:hover {
	color: #CACACA;
}

.nava:link, .nava:visited, .nava:hover {
	color: #ffffff;
	text-decoration: none;
}

.nava:active {}


@media all and (min-width: 400px) {
	.nav#mobile {
		display: none;
	}

	.navlink {
		display: inline-block;
		width:30%;
		height:100%;
	}

	.nav#desktop {
		display: block;
	}
}
@media all and (min-width: 925px) {
	.content {
		width: 925px;
		border-left: 1px solid #AAAAAA;
		border-right: 1px solid #AAAAAA;
	}
}</style><style class="darkreader darkreader--sync" media="screen"></style>
		<link rel="stylesheet" type="text/css" href="./Bunnyhopping from the Programmer&#39;s Perspective_files/syntax.css"><style class="darkreader darkreader--cors" media="screen">code {padding: 1px 4px;}
pre > code {padding: 0;}
.highlight, code  { background: #ffffff; border: 1px solid #a9a9a9; border-radius: 5px;}
.highlight {padding: 5px; margin-bottom: 1em; max-height: 35.7em; overflow: scroll;}
.highlight code {border: 0 !important; background: clear !important; border-radius: 0 !important;}
.highlight .c { color: #999988; font-style: italic } 
.highlight .err { color: #a61717; background-color: #e3d2d2 } 
.highlight .k { font-weight: bold } 
.highlight .o { font-weight: bold } 
.highlight .cm { color: #999988; font-style: italic } 
.highlight .cp { color: #999999; font-weight: bold } 
.highlight .c1 { color: #999988; font-style: italic } 
.highlight .cs { color: #999999; font-weight: bold; font-style: italic } 
.highlight .gd { color: #000000; background-color: #ffdddd } 
.highlight .gd .x { color: #000000; background-color: #ffaaaa } 
.highlight .ge { font-style: italic } 
.highlight .gr { color: #aa0000 } 
.highlight .gh { color: #999999 } 
.highlight .gi { color: #000000; background-color: #ddffdd } 
.highlight .gi .x { color: #000000; background-color: #aaffaa } 
.highlight .go { color: #888888 } 
.highlight .gp { color: #555555 } 
.highlight .gs { font-weight: bold } 
.highlight .gu { color: #aaaaaa } 
.highlight .gt { color: #aa0000 } 
.highlight .kc { font-weight: bold } 
.highlight .kd { font-weight: bold } 
.highlight .kp { font-weight: bold } 
.highlight .kr { font-weight: bold } 
.highlight .kt { color: #445588; font-weight: bold } 
.highlight .m { color: #009999 } 
.highlight .s { color: #d14 } 
.highlight .na { color: #008080 } 
.highlight .nb { color: #0086B3 } 
.highlight .nc { color: #445588; font-weight: bold } 
.highlight .no { color: #008080 } 
.highlight .ni { color: #800080 } 
.highlight .ne { color: #990000; font-weight: bold } 
.highlight .nf { color: #990000; font-weight: bold } 
.highlight .nn { color: #555555 } 
.highlight .nt { color: #000080 } 
.highlight .nv { color: #008080 } 
.highlight .ow { font-weight: bold } 
.highlight .w { color: #bbbbbb } 
.highlight .mf { color: #009999 } 
.highlight .mh { color: #009999 } 
.highlight .mi { color: #009999 } 
.highlight .mo { color: #009999 } 
.highlight .sb { color: #d14 } 
.highlight .sc { color: #d14 } 
.highlight .sd { color: #d14 } 
.highlight .s2 { color: #d14 } 
.highlight .se { color: #d14 } 
.highlight .sh { color: #d14 } 
.highlight .si { color: #d14 } 
.highlight .sx { color: #d14 } 
.highlight .sr { color: #009926 } 
.highlight .s1 { color: #d14 } 
.highlight .ss { color: #990073 } 
.highlight .bp { color: #999999 } 
.highlight .vc { color: #008080 } 
.highlight .vg { color: #008080 } 
.highlight .vi { color: #008080 } 
.highlight .il { color: #009999 } 
.highlight td, .highlight table, .highlight tr {border: none;}
.lineno { padding-left: 2px; padding-right: 4px; color: #888; }
.code {padding-left: 4px;}</style><style class="darkreader darkreader--sync" media="screen"></style>
		<script async="" src="./Bunnyhopping from the Programmer&#39;s Perspective_files/analytics.js.download"></script><script defer="" src="./Bunnyhopping from the Programmer&#39;s Perspective_files/jquery.min.js.download"></script>
		<script defer="" type="text/javascript" src="./Bunnyhopping from the Programmer&#39;s Perspective_files/all.js.download"></script>
		<script defer="" type"text="" javascript"="" src="./Bunnyhopping from the Programmer&#39;s Perspective_files/gfycat.js.download"></script>

		<meta name="viewport" content="width=device-width">
		
		
		<script>
		  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

		  ga('create', 'UA-53642959-1', 'auto');
		  ga('send', 'pageview');

		</script><style class="darkreader darkreader--override" media="screen">.vimvixen-hint {
    background-color: #7b5300 !important;
    border-color: #d8b013 !important;
    color: #f3e8c8 !important;
}
::placeholder {
    opacity: 0.5 !important;
}</style>
	<script type="text/javascript" async="" src="./Bunnyhopping from the Programmer&#39;s Perspective_files/embed.js.download"></script><link rel="prefetch" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.5c5dad4ae74bbb3422efd01116dc45e6.css"><link rel="prefetch" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.e150012b6029bf98df48f021965c6081.js"><link rel="prefetch" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.ca5fccd41098c8c41f4ca679c8abad9a.js"><link rel="prefetch" as="script" href="https://disqus.com/next/config.js"></head>
	<body>
		<div class="header">
			<h1 class="grad_text">adrian's soapbox</h1>
			<div class="nav" id="mobile" style="transform: none;">
				<div class="grad_text">open navigation</div>
			</div>
			<div class="nav" id="desktop" style="transform: none;">
				<a class="nava" href="https://adrianb.io/index.html"><div class="navlink">home</div></a>
				<a class="nava" href="https://adrianb.io/about"><div class="navlink">about</div></a>
				<a class="nava" href="https://github.com/Flafla2"><div class="navlink">github</div></a>
			</div>
			<div id="navlinks">
				<a class="nava" href="https://adrianb.io/index.html"><div class="navlink">home</div></a>
				<a class="nava" href="https://adrianb.io/about"><div class="navlink">about</div></a>
				<a class="nava" href="https://github.com/Flafla2"><div class="navlink">github</div></a>
			</div>
		</div>
		<div class="content">

<div class="article" style="border-bottom: none; --darkreader-inline-border-bottom: initial;" data-darkreader-inline-border-bottom="">
	<h1>Bunnyhopping from the Programmer's Perspective</h1>
	<p class="postinfo">
	
	
	
	
	
	<a href="https://adrianb.io/tags/tech_writeup/"><span class="post_tag">Technical Writeup</span></a>
	
	
	
	
	Posted on 14 February 2015 by Flafla2
	
	</p>
	<p>"Bunnyhopping" is an exploit of a very popular bug in games like <em>Quake III Arena</em>, <em>Half-Life</em>, and <em>Counter-Strike</em>.  Bunnyhopping, or <em>bhopping</em> for short, allows a player to exceed the game-defined speed limit.  It has created entirely new methods of play and allows very exciting, fast-paced emergent gameplay.  As a decidedly skill-based mechanic, competitive players love bhopping because it is so hard to master.  Thus, it may be useful to you as a game developer to "implement" bunnyhopping into your game.  The purpose of this article is to define what bunnyhopping is, why it is important to consider as a game developer, and how to implement it mathematically into your FPS movement code.  All code examples are open-source and free to use, as always.</p>

<p>This is what bunnyhopping looks like in-game to a skilled player:</p>

<div style="max-width:512px;display:block;margin:0 auto;">
    <video width="100%" controls="" autoplay="" loop="" muted="" preload="none">
		<source src="/gfycat_old/BlackandwhitePiercingDodo.mp4" type="video/mp4">
		[Use a browser with video tag to view]
	</video>
</div>
<p style="text-align: center">
    <i>One Example of Bunnyhopping in Counter-Strike: Source</i> (<a href="https://www.youtube.com/watch?v=KYEyIGLRqW0">Source</a>)
</p>

<!--break-->

<h2 id="air-strafing">Air Strafing</h2>

<p>The most important component of bunnyhopping is the concept of <em>Air Strafing</em>.  In the clip above you may notice the player quickly wiggle his mouse left and right.  When he does this, he syncs his mouse movement with his movement keys.  That is, when he moves the mouse to the left he holds the <em>a</em> (left movement) key, and when he moves the mouse to the right he holds the <em>d</em> (right movement) key.  The result of this from the player's perspective is a rapid increase in speed.  This explains in part why bunnyhopping is such a skill-based mechanic.  It takes great skill and accuracy to perfectly sync your mouse movement to your movement keys.</p>

<h3 id="explaining-air-strafing-mathematically">Explaining Air Strafing Mathematically</h3>

<p>Air Strafing works because of the way movement acceleration is handled in the Quake Engine.  It is possible in any game that is based off of the Quake engine, such as Source.  If you would like you can check out the <a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/game/bg_pmove.c#L240">Quake III movement code</a> or the <a href="https://github.com/ValveSoftware/source-sdk-2013/blob/56accfdb9c4abd32ae1dc26b2e4cc87898cf4dc1/sp/src/game/shared/gamemovement.cpp#L1822">Half Life 2 movement code</a> on GitHub.  Keep in mind that both codebases contain engine-specific code so they aren't as easy to integrate as the code in this article.  Nevertheless it is still interesting to see the origins of the mechanic.</p>

<p>In the Quake III acceleration code, movement speed is limited in a very interesting and nonobvious way.  <strong>Instead of limiting velocity directly, only the projection of the current velocity onto acceleration is limited.</strong>  To explain this further, I need to first explain what vector projection is.</p>

<h3 id="vector-projection">Vector Projection</h3>

<p>The projection of a vector <em>a</em> onto a vector <em>b</em> (also known as the component of <em>a</em> onto <em>b</em>) is "The orthagonal projection of <em>a</em> onto a straight line parallel to <em>b</em>" (To quote <a href="http://en.wikipedia.org/wiki/Vector_projection">Wikipedia</a>).  This concept is illustrated below.</p>

<p style="text-align: center">
    <img src="./Bunnyhopping from the Programmer&#39;s Perspective_files/vecproj.png" style="text-align: center; width: 100%; max-width: 512px;"><br>
    <i>Figure 1: Projecting vector a onto vector b</i>
</p>

<p>Vector projection can be represented by the equation:</p>

<center><span class="math"><i>V</i><sub>proj</sub> = |a| * cos( Θ ) = a • b̂</span></center>
<p><br></p>

<p>Above, • represents a <a href="http://en.wikipedia.org/wiki/Dot_product">dot product</a> and <span class="math">b̂</span> is the unit vector of b (that is, a vector in the direction of b and a length of 1).  The dot product notation works because a dot product is equal to <code>|a| * |b| * cos(Θ)</code>.  This is preferable because it is faster to perform than a cosine calculation.</p>

<h3 id="limiting-the-projection">Limiting the Projection</h3>

<p>I'll repeat here what I said before: <em>Instead of limiting velocity directly, only the projection of the current velocity onto acceleration is limited.</em>  This allows the player to exceed the maximum velocity in certain situations.  Recall that in order to airstrafe you must sync your movement keys with your mouse movement.  Let's model this mathematically:</p>

<p style="text-align: center">
    <img src="./Bunnyhopping from the Programmer&#39;s Perspective_files/airstrafe.png" style="text-align: center; width: 100%; max-width: 512px;"><br>
    <i>Figure 2: Using projection to limit speed.  "Time 0" is on the top left, Time 1 is on the top right, etc.  Here is the key to this diagram:</i><br><br>

    </p><div style="max-width: 512px; text-align: justify; display: block; margin-left: auto; margin-right: auto;">
    	    V<sub>c</sub> = The current velocity before any calculations<br>
	    <span style="color: green; --darkreader-inline-color:#7fff7f;" data-darkreader-inline-color="">V<sub>w</sub> = The direction that the player wants to move in (the so-called wish direction).</span><br>
	    <span style="color: red; --darkreader-inline-color:#ff3333;" data-darkreader-inline-color="">V<sub>p</sub> = V<sub>c</sub> projected onto V<sub>w</sub>.  Keep in mind that we are only considering magnitude in this calculation, so the direction of the projection doesn't matter.</span><br>
	    V<sub>a</sub> = The acceleration to be added to V<sub>p</sub>.  The magnitude of this acceleration is server-defined.<br>
	    <span style="color: blue; --darkreader-inline-color:#337dff;" data-darkreader-inline-color="">V<sub>max</sub> = The server-defined maximum velocity.  If V<sub>p</sub> + V<sub>a</sub> exceeds this, then V<sub>a</sub> is truncated.</span>
    </div>
<p></p>

<p>In the above example, the player is both moving and turning left.  After 4 physics ticks, V<sub>p</sub> passes the server-defined speed limit V<sub>max</sub> and V<sub>a</sub> is truncated to account for this.  Note, however, that V<sub>c</sub> still substantially exceeds V<sub>max</sub>!</p>

<h3 id="in-code">In Code</h3>

<p>Here is my implementation of the above concepts in code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="n">Vector3</span> <span class="nf">Accelerate</span><span class="p">(</span><span class="n">Vector3</span> <span class="n">accelDir</span><span class="p">,</span> <span class="n">Vector3</span> <span class="n">prevVelocity</span><span class="p">,</span> <span class="kt">float</span> <span class="n">accelerate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">max_velocity</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">projVel</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="nf">Dot</span><span class="p">(</span><span class="n">prevVelocity</span><span class="p">,</span> <span class="n">accelDir</span><span class="p">);</span> <span class="c1">// Vector projection of Current velocity onto accelDir.</span>
    <span class="kt">float</span> <span class="n">accelVel</span> <span class="p">=</span> <span class="n">accelerate</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">fixedDeltaTime</span><span class="p">;</span> <span class="c1">// Accelerated velocity in direction of movment</span>

    <span class="c1">// If necessary, truncate the accelerated velocity so the vector projection does not exceed max_velocity</span>
    <span class="k">if</span><span class="p">(</span><span class="n">projVel</span> <span class="p">+</span> <span class="n">accelVel</span> <span class="p">&gt;</span> <span class="n">max_velocity</span><span class="p">)</span>
        <span class="n">accelVel</span> <span class="p">=</span> <span class="n">max_velocity</span> <span class="p">-</span> <span class="n">projVel</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">prevVelocity</span> <span class="p">+</span> <span class="n">accelDir</span> <span class="p">*</span> <span class="n">accelVel</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h2 id="friction">Friction</h2>

<p>Friction also plays an important role in bunnyhopping as well as Quake-style movment in general.  Bunnyhopping earned its name because the player literally has to hop in order to gain speed.  This is because if players didn't do this friction would reduce their speed.</p>

<p>Why, then, is it possible to bunnyhop at all?  Wouldn't you always hit the ground and thus lose speed?  This actually is not true in the Quake or Source engines because <strong>there is a 1-frame window where friction is not applied when the player hits the ground</strong>.  This means that the player has a single frame to input the <em>jump</em> command without losing speed - another reason why bunnyhopping is so hard!  If you want to retain the skill-based nature of bunnyhopping then be sure to add this delay into your physics calculations.  If you want bhopping to be accessible to new players, you can add <em>auto-bhopping</em> where the player can simply hold space to automatically jump frame-perfectly.</p>

<p>The actual friction calculation is very simple, and looks like this in code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">float</span> <span class="n">speed</span> <span class="p">=</span> <span class="n">prevVelocity</span><span class="p">.</span><span class="n">magnitude</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">speed</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span> <span class="c1">// To avoid divide by zero errors</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">drop</span> <span class="p">=</span> <span class="n">speed</span> <span class="p">*</span> <span class="n">friction</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">fixedDeltaTime</span><span class="p">;</span>
    <span class="n">prevVelocity</span> <span class="p">*=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">speed</span> <span class="p">-</span> <span class="n">drop</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span> <span class="p">/</span> <span class="n">speed</span><span class="p">;</span> <span class="c1">// Scale the velocity based on friction.</span>
<span class="p">}</span></code></pre></figure>

<p>Of course, friction is only applied when the player is grounded.  <code>friction</code> is a server-defined variable of the approximate range 1-5.  The higher <code>friction</code> is, the less slippery surfaces become.  If you are familiar with console commands in the Source engine, you may recognize this variable as <code>sv_friction</code>.</p>

<h2 id="putting-it-all-together">Putting it All Together</h2>

<p>Here is what all of this looks like in code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// accelDir: normalized direction that the player has requested to move (taking into account the movement keys and look direction)</span>
<span class="c1">// prevVelocity: The current velocity of the player, before any additional calculations</span>
<span class="c1">// accelerate: The server-defined player acceleration value</span>
<span class="c1">// max_velocity: The server-defined maximum player velocity (this is not strictly adhered to due to strafejumping)</span>
<span class="k">private</span> <span class="n">Vector3</span> <span class="nf">Accelerate</span><span class="p">(</span><span class="n">Vector3</span> <span class="n">accelDir</span><span class="p">,</span> <span class="n">Vector3</span> <span class="n">prevVelocity</span><span class="p">,</span> <span class="kt">float</span> <span class="n">accelerate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">max_velocity</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">projVel</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="nf">Dot</span><span class="p">(</span><span class="n">prevVelocity</span><span class="p">,</span> <span class="n">accelDir</span><span class="p">);</span> <span class="c1">// Vector projection of Current velocity onto accelDir.</span>
    <span class="kt">float</span> <span class="n">accelVel</span> <span class="p">=</span> <span class="n">accelerate</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">fixedDeltaTime</span><span class="p">;</span> <span class="c1">// Accelerated velocity in direction of movment</span>

    <span class="c1">// If necessary, truncate the accelerated velocity so the vector projection does not exceed max_velocity</span>
    <span class="k">if</span><span class="p">(</span><span class="n">projVel</span> <span class="p">+</span> <span class="n">accelVel</span> <span class="p">&gt;</span> <span class="n">max_velocity</span><span class="p">)</span>
        <span class="n">accelVel</span> <span class="p">=</span> <span class="n">max_velocity</span> <span class="p">-</span> <span class="n">projVel</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">prevVelocity</span> <span class="p">+</span> <span class="n">accelDir</span> <span class="p">*</span> <span class="n">accelVel</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">private</span> <span class="n">Vector3</span> <span class="nf">MoveGround</span><span class="p">(</span><span class="n">Vector3</span> <span class="n">accelDir</span><span class="p">,</span> <span class="n">Vector3</span> <span class="n">prevVelocity</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Apply Friction</span>
    <span class="kt">float</span> <span class="n">speed</span> <span class="p">=</span> <span class="n">prevVelocity</span><span class="p">.</span><span class="n">magnitude</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">speed</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span> <span class="c1">// To avoid divide by zero errors</span>
    <span class="p">{</span>
        <span class="kt">float</span> <span class="n">drop</span> <span class="p">=</span> <span class="n">speed</span> <span class="p">*</span> <span class="n">friction</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">fixedDeltaTime</span><span class="p">;</span>
        <span class="n">prevVelocity</span> <span class="p">*=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">speed</span> <span class="p">-</span> <span class="n">drop</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span> <span class="p">/</span> <span class="n">speed</span><span class="p">;</span> <span class="c1">// Scale the velocity based on friction.</span>
    <span class="p">}</span>

    <span class="c1">// ground_accelerate and max_velocity_ground are server-defined movement variables</span>
    <span class="k">return</span> <span class="nf">Accelerate</span><span class="p">(</span><span class="n">accelDir</span><span class="p">,</span> <span class="n">prevVelocity</span><span class="p">,</span> <span class="n">ground_accelerate</span><span class="p">,</span> <span class="n">max_velocity_ground</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">private</span> <span class="n">Vector3</span> <span class="nf">MoveAir</span><span class="p">(</span><span class="n">Vector3</span> <span class="n">accelDir</span><span class="p">,</span> <span class="n">Vector3</span> <span class="n">prevVelocity</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// air_accelerate and max_velocity_air are server-defined movement variables</span>
    <span class="k">return</span> <span class="nf">Accelerate</span><span class="p">(</span><span class="n">accelDir</span><span class="p">,</span> <span class="n">prevVelocity</span><span class="p">,</span> <span class="n">air_accelerate</span><span class="p">,</span> <span class="n">max_velocity_air</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Those of you who are familiar with the Source engine may once again recognize the <code>sv_accelerate</code>, <code>sv_airaccelerate</code>, and <code>sv_friction</code> convars in this code.  Take some time to tweak these server-defined variables to your liking as they determine the feel of your game's movement.</p>

<p>That's it!  This should be all you need to implement bunnyhopping into your game.  If you have any questions or comments please feel free to post in the comments section below.  Thank you for reading!</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/game/bg_pmove.c">Quake III movement code</a> - This is the original Quake engine movment code that "started it all".  Check this out for nostalgia.  There is a lot of engine-specific/messy code in there so watch out.</li>
  <li><a href="https://github.com/ValveSoftware/source-sdk-2013/blob/56accfdb9c4abd32ae1dc26b2e4cc87898cf4dc1/sp/src/game/shared/gamemovement.cpp">Source Engine movement code</a> - This code was based off of the Quake engine code.  However, it is a bit easier to decipher than the Quake engine.  It also has some old code from an unreleased TF2 "Commander Mode" which is pretty cool.</li>
  <li><a href="http://gamedev.stackexchange.com/questions/45639/implementing-strafe-jumping">"How do I implement strafe-jumping?"</a> - This is a gamedev stackexchange question that is pretty enlightening on the maths behind strafejumping.</li>
  <li><a href="http://www.funender.com/quake/articles/strafing_theory.html">F3Quake - Strafing Theory</a> - This is a player-created mathematical analysis on strafe jumping which seeks to find the mathematically optimal air strafing strategy.  It's an interesting read for any math nerd.  It also details the worth of implementing bunnyhopping for the sake of a hardcore community.</li>
</ul>

	<br>

	
	<h1>Comments</h1>
	<div id="disqus_thread"><iframe id="dsq-app6363" name="dsq-app6363" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./Bunnyhopping from the Programmer&#39;s Perspective_files/saved_resource.html" horizontalscrolling="no" verticalscrolling="no" style="height: 75px !important;"></iframe></div>
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'flafla2'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

	
</div>

		</div>
		<div id="footer"><a rel="license" href="http://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" style="border-width:0" src="./Bunnyhopping from the Programmer&#39;s Perspective_files/80x15.png"></a><br>The original contents of this website are licensed by Adrian Biagioli (Flafla2) under a <a rel="license" href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.</div>
	
<iframe style="display: none;" src="./Bunnyhopping from the Programmer&#39;s Perspective_files/saved_resource(1).html"></iframe></body></html>